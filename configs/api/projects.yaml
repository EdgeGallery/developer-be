#
#    Copyright 2020 Huawei Technologies Co., Ltd.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
swagger: "2.0"
info:
  version: "1.0.0"
  title: "swagger definition for org.edgegallery.developer.controller.ProjectController"
  x-java-interface: "cse.gen.openMec.mec_developer.projects.ProjectControllerIntf"
basePath: "/mec/developer/v1/projects"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /{projectId}/image:
    get:
      tags:
        - "Project"
      summary: "getImagesByProjectId."
      operationId: "getImagesByProjectId"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectImageResponse"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    post:
      tags:
        - "Project"
      summary: "addImageToProject."
      operationId: "addImageToProject"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - in: "body"
          name: "imageConfig"
          description: "ProjectImageConfig"
          required: true
          schema:
            $ref: "#/definitions/ProjectImageConfig"
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectImageConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{projectId}/action/clean:
    post:
      tags:
        - "Project"
      summary: "clean the test environment"
      operationId: "clean"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - name: "completed"
          in: "query"
          description: "completed"
          required: true
          type: "boolean"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "boolean"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /:
    get:
      tags:
        - "Project"
      summary: "get users all projects "
      operationId: "getAllProjects"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ApplicationProject"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    post:
      tags:
        - "Project"
      summary: "create one project"
      operationId: "createProject"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - in: "body"
          name: "project"
          description: "ApplicationProject"
          required: true
          schema:
            $ref: "#/definitions/ApplicationProject"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ApplicationProject"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{projectId}/test-config:
    get:
      tags:
        - "Project"
      summary: "get one test configuration"
      operationId: "getTestConfig"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectTestConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    post:
      tags:
        - "Project"
      summary: "create one test configuration"
      operationId: "createTestConfig"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - in: "body"
          name: "testConfig"
          description: "ProjectTestConfig"
          required: true
          schema:
            $ref: "#/definitions/ProjectTestConfig"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectTestConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    put:
      tags:
        - "Project"
      summary: "modify one test configuration"
      operationId: "modifyTestConfig"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - in: "body"
          name: "testConfig"
          description: "ProjectTestConfig"
          required: true
          schema:
            $ref: "#/definitions/ProjectTestConfig"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectTestConfig"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{projectId}/image/{imageId}:
    delete:
      tags:
        - "Project"
      summary: "ProjectImageConfig."
      operationId: "deleteImageById"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - name: "imageId"
          in: "path"
          description: "imageId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "boolean"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{projectId}:
    get:
      tags:
        - "Project"
      summary: "get one project by projectId"
      operationId: "getProject"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ApplicationProject"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    put:
      tags:
        - "Project"
      summary: "modify one project"
      operationId: "modifyProject"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - in: "body"
          name: "project"
          description: "ApplicationProject"
          required: true
          schema:
            $ref: "#/definitions/ApplicationProject"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ApplicationProject"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    delete:
      tags:
        - "Project"
      summary: "delete one project"
      operationId: "deleteProject"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "boolean"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{projectId}/action/deploy:
    post:
      tags:
        - "Project"
      summary: "deploy one project"
      operationId: "deployPorject"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ApplicationProject"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{projectId}/action/open-api:
    post:
      tags:
        - "Project"
      summary: "open this project to mec eco"
      operationId: "openToMecEco"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/OpenMepCapabilityGroup"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{projectId}/action/upload:
    post:
      tags:
        - "Project"
      summary: "upload this project to AppStore."
      operationId: "uploadToAppStore"
      consumes:
        - "application/json;charset=UTF-8"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "projectId"
          in: "path"
          description: "projectId"
          required: true
          type: "string"
        - name: "userId"
          in: "query"
          description: "userId"
          required: true
          type: "string"
        - name: "userName"
          in: "query"
          description: "userName"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "string"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
definitions:
  ProjectImageConfig:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      port:
        type: "integer"
        format: "int32"
      version:
        type: "string"
      projectId:
        type: "string"
      type:
        type: "string"
        enum:
          - "PLATFORM"
          - "DEVELOPER"
          - "OTHER"
        x-java-class: "org.edgegallery.developer.model.workspace.EnumProjectImage"
      nodePort:
        type: "integer"
        format: "int32"
    x-java-class: "org.edgegallery.developer.model.workspace.ProjectImageConfig"
  ErrorRespDto:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      detail:
        type: "string"
    x-java-class: "org.edgegallery.developer.response.ErrorRespDto"
  ApplicationProject:
    type: "object"
    properties:
      id:
        type: "string"
      projectType:
        type: "string"
        enum:
          - "CREATE_NEW"
          - "MIGRATE"
        x-java-class: "org.edgegallery.developer.model.workspace.EnumProjectType"
      name:
        type: "string"
      version:
        type: "string"
      provider:
        type: "string"
      platform:
        type: "array"
        items:
          type: "string"
      type:
        type: "string"
      industry:
        type: "array"
        items:
          type: "string"
      description:
        type: "string"
      iconFileId:
        type: "string"
      status:
        type: "string"
        enum:
          - "ONLINE"
          - "DEPLOYING"
          - "DEPLOYED"
          - "DEPLOYED_FAILED"
          - "TESTING"
          - "TESTED"
        x-java-class: "org.edgegallery.developer.model.workspace.EnumProjectStatus"
      capabilityList:
        type: "array"
        items:
          $ref: "#/definitions/OpenMepCapabilityGroup"
      lastTestId:
        type: "string"
      userId:
        type: "string"
      createDate:
        type: "string"
        format: "date-time"
      openCapabilityId:
        type: "string"
    x-java-class: "org.edgegallery.developer.model.workspace.ApplicationProject"
  OpenMepCapabilityDetail:
    type: "object"
    properties:
      detailId:
        type: "string"
      groupId:
        type: "string"
      service:
        type: "string"
      version:
        type: "string"
      description:
        type: "string"
      provider:
        type: "string"
      apiFileId:
        type: "string"
    x-java-class: "org.edgegallery.developer.model.workspace.OpenMepCapabilityDetail"
  OpenMepCapabilityGroup:
    type: "object"
    properties:
      groupId:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
        enum:
          - "OPENMEP"
          - "OPENMEP_ECO"
        x-java-class: "org.edgegallery.developer.model.workspace.EnumOpenMepType"
      description:
        type: "string"
      capabilityDetailList:
        type: "array"
        items:
          $ref: "#/definitions/OpenMepCapabilityDetail"
    x-java-class: "org.edgegallery.developer.model.workspace.OpenMepCapabilityGroup"
  CommonImage:
    type: "object"
    properties:
      imageId:
        type: "string"
      serviceName:
        type: "string"
      imageName:
        type: "string"
      version:
        type: "string"
      env:
        type: "array"
        items:
          $ref: "#/definitions/EnvMap"
      ports:
        type: "array"
        items:
          $ref: "#/definitions/PortMap"
      imagePullPolicy:
        type: "string"
        enum:
          - "IF_NOT_PRESENT"
        x-java-class: "org.edgegallery.developer.model.workspace.EnumImagePullPolicy"
      volumeMounts:
        type: "array"
        items:
          $ref: "#/definitions/VolumeMountMap"
    x-java-class: "org.edgegallery.developer.model.workspace.CommonImage"
  EnvMap:
    type: "object"
    properties:
      name:
        type: "string"
      value:
        type: "string"
    x-java-class: "org.edgegallery.developer.model.workspace.CommonImage$EnvMap"
  MepAgentConfig:
    type: "object"
    properties:
      serviceName:
        type: "string"
      href:
        type: "string"
      port:
        type: "integer"
        format: "int32"
    x-java-class: "org.edgegallery.developer.model.workspace.MepAgentConfig"
  MepHost:
    type: "object"
    required:
      - "status"
    properties:
      hostId:
        type: "string"
      name:
        type: "string"
      address:
        type: "string"
      architecture:
        type: "string"
      status:
        type: "string"
        enum:
          - "NORMAL"
          - "BUSY"
        x-java-class: "org.edgegallery.developer.model.workspace.EnumHostStatus"
      ip:
        type: "string"
      protocol:
        type: "string"
      port:
        type: "integer"
        format: "int32"
      os:
        type: "string"
      portRangeMin:
        type: "integer"
        format: "int32"
      portRangeMax:
        type: "integer"
        format: "int32"
    x-java-class: "org.edgegallery.developer.model.resource.MepHost"
  PortMap:
    type: "object"
    properties:
      containerPort:
        type: "integer"
        format: "int32"
      protocol:
        type: "string"
      nodePort:
        type: "integer"
        format: "int32"
    x-java-class: "org.edgegallery.developer.model.workspace.CommonImage$PortMap"
  ProjectTestConfig:
    type: "object"
    properties:
      testId:
        type: "string"
      projectId:
        type: "string"
      agentConfig:
        $ref: "#/definitions/MepAgentConfig"
      imageFileIds:
        type: "array"
        items:
          type: "string"
      appImages:
        type: "array"
        items:
          $ref: "#/definitions/CommonImage"
      otherImages:
        type: "array"
        items:
          $ref: "#/definitions/CommonImage"
      hosts:
        type: "array"
        items:
          $ref: "#/definitions/MepHost"
      appApiFileId:
        type: "string"
      status:
        type: "string"
        enum:
          - "NETWORK_ERROR"
          - "CSAR_EXCEPTION"
          - "DELETED"
          - "IMAGE_PULL_BACKOFF"
          - "RUNNING"
        x-java-class: "org.edgegallery.developer.model.workspace.EnumTestStatus"
      accessUrl:
        type: "string"
      errorLog:
        type: "string"
      workLoadId:
        type: "string"
      appInstanceId:
        type: "string"
      deployDate:
        type: "string"
        format: "date-time"
    x-java-class: "org.edgegallery.developer.model.workspace.ProjectTestConfig"
  VolumeMountMap:
    type: "object"
    properties:
      name:
        type: "string"
      mountPath:
        type: "string"
    x-java-class: "org.edgegallery.developer.model.workspace.CommonImage$VolumeMountMap"
  ProjectImageResponse:
    type: "object"
    properties:
      images:
        type: "array"
        items:
          $ref: "#/definitions/ProjectImageConfig"
    x-java-class: "org.edgegallery.developer.response.ProjectImageResponse"