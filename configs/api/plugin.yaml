#
#    Copyright 2020 Huawei Technologies Co., Ltd.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
swagger: "2.0"
info:
  version: "1.0.0"
  title: "swagger definition for org.edgegallery.developer.interfaces.plugin.PluginController"
  x-java-interface: "cse.gen.openMec.mec_developer.plugin.PluginControllerIntf"
basePath: "/mec/developer/v1/plugins"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /{pluginId}:
    put:
      tags:
        - "Plugin"
      summary: "update plugin"
      description: "The API can receive the modify plugin  request.\r\nNoticed that\
        \  Authorization and userid are obtained from the request header,the pluginId\
        \ can be only String type,if pluginId not exist or Incorrect,it will be response\
        \ with state 400.\r\n If the modify plugin is successful,then it will be response\
        \ with state 200 and plugin object"
      operationId: "updatePlugin"
      parameters:
        - name: "pluginFile"
          in: "formData"
          description: "plugin"
          required: true
          type: "file"
        - name: "logoFile"
          in: "formData"
          description: "logo File"
          required: true
          type: "file"
        - name: "apiFile"
          in: "formData"
          description: "api File"
          required: true
          type: "file"
        - name: "pluginName"
          in: "formData"
          description: "plugin name"
          required: true
          type: "string"
        - name: "codeLanguage"
          in: "formData"
          description: "plugin function"
          required: true
          type: "string"
        - name: "pluginType"
          in: "formData"
          description: "plugin type,1:plugin,2:SDK"
          required: true
          type: "string"
        - name: "version"
          in: "formData"
          description: "plugin version"
          required: true
          type: "string"
        - name: "introduction"
          in: "formData"
          description: "plugin introduction"
          required: true
          type: "string"
        - name: "pluginId"
          in: "path"
          description: "plugin id"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Plugin"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    delete:
      tags:
        - "Plugin"
      summary: "delete one plugin or sdk"
      description: "The API can receive the delete plugin request.\r\nNoticed that\
        \ the  Authorization and userid are obtained from the request header,pluginId\
        \ can be only String type,if pluginId not exist or Incorrect,it will be response\
        \ with state 400.\r\n If the delete is successful, then it will be response\
        \ with state 200 and plugin object what be deleted"
      operationId: "deletePlugin"
      parameters:
        - name: "pluginId"
          in: "path"
          description: "plugin id"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "boolean"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{pluginId}/action/download:
    get:
      tags:
        - "Plugin"
      summary: "download one plugin or sdk"
      description: "The API can receive the download plugin request.\r\nNoticed that\
        \ the pluginId can be only String type,if pluginId not exist or Incorrect,it\
        \ will be response with state 400.\r\nif pluginId is correct,but plugin file\
        \ not exist,,it will be response with state 204.\r\nIf the download plugin\
        \ is successful, then it will be response with state 200 and plugin file"
      operationId: "downloadFile"
      parameters:
        - name: "pluginId"
          in: "path"
          description: "pluginId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
        404:
          description: "No Content"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /:
    get:
      tags:
        - "Plugin"
      summary: "query all plugin or sdk"
      description: "The API can receive the query plugin list request.\r\nNoticed\
        \ that the  Authorization and userid are obtained from the request header,pluginType\
        \ can be only  1 or 2,if 3,it will be response with state 400.\r\nif any parameter\
        \ is missing, it will be response with state 400. \r\nIf the query is successful,\
        \ then it will be response with state 200 and List<Plugin> object"
      operationId: "getAll"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "pluginType"
          in: "query"
          description: "plugin type:plugin or sdk"
          required: true
          type: "string"
        - name: "limit"
          in: "query"
          description: "the max count of one page"
          required: true
          type: "integer"
          format: "int32"
        - name: "offset"
          in: "query"
          description: "start index of the page"
          required: true
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Page"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorRespDto"
    post:
      tags:
        - "Plugin"
      summary: "upload plugin to server"
      description: "The API can receive the upload request from upload form, and there\
        \ are nine kinds of parameters  are needed. Noticed that the  username and\
        \ userid are obtained from the login page, andAuthorization an userid are\
        \ obtained from the request header, if any parameter is missing,it will be\
        \ response with state 400. If the upload is successful, then it will be response\
        \ with state 200 and Plugin object"
      operationId: "upload"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json;charset=UTF-8"
      parameters:
        - name: "pluginFile"
          in: "formData"
          description: "plugin"
          required: true
          type: "file"
        - name: "logoFile"
          in: "formData"
          description: "logo File"
          required: true
          type: "file"
        - name: "apiFile"
          in: "formData"
          description: "api File"
          required: true
          type: "file"
        - name: "pluginName"
          in: "query"
          description: "plugin name"
          required: true
          type: "string"
        - name: "codeLanguage"
          in: "query"
          description: "plugin function"
          required: true
          type: "string"
        - name: "pluginType"
          in: "query"
          description: "plugin type,1:plugin,2:sdk"
          required: true
          type: "string"
        - name: "version"
          in: "query"
          description: "plugin version"
          required: true
          type: "string"
        - name: "introduction"
          in: "query"
          description: "plugin introduction"
          required: true
          type: "string"
        - name: "userId"
          in: "query"
          description: "the author's Id of upload plugin"
          required: true
          type: "string"
        - name: "userName"
          in: "query"
          description: "the author's name of upload plugin"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Plugin"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{pluginId}/action/get-apifile:
    get:
      tags:
        - "Plugin"
      summary: "download  api file"
      description: "The API can receive the download plugin api file request.\r\n\
        Noticed that the pluginId can be only String type,if pluginId not exist or\
        \ Incorrect,it will be response with state 400.\r\nif pluginId is correct,but\
        \ plugin file not exist,,it will be response with state 204.\r\nIf the download\
        \ plugin logo is successful, then it will be response with state 200 and pluginapi\
        \ file"
      operationId: "getApiFile"
      parameters:
        - name: "pluginId"
          in: "path"
          description: "pluginId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        404:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{pluginId}/action/get-logofile:
    get:
      tags:
        - "Plugin"
      summary: "download logo file"
      description: "The API can receive the download plugin logo file request.\r\n\
        Noticed that the pluginId can be only String type,if pluginId not exist or\
        \ Incorrect,it will be response with state 400.\r\nif pluginId is correct,but\
        \ plugin file not exist,,it will be response with state 204.\r\n with state\
        \ 204.\r\nIf the download plugin logo is successful, then it will be response\
        \ with state 200 and plugin logo file"
      operationId: "getLogoFile"
      parameters:
        - name: "pluginId"
          in: "path"
          description: "pluginId"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "file"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/ErrorRespDto"
  /{pluginId}/action/score:
    put:
      tags:
        - "Plugin"
      summary: "update plugin satisfaction"
      description: "The API can receive the modify plugin  satisfaction request.\r\
        \nNoticed that  Authorization and userid are obtained from the request header,the\
        \ pluginId and score can be only String type, and score ranges from 1 to 5.\r\
        \nif pluginId not exist or Incorrect,it will be response with state 400.\r\
        \nIf the modify plugin satisfaction is successful, it will be responsewith\
        \ state 200 and plugin object"
      operationId: "updateScore"
      parameters:
        - name: "pluginId"
          in: "path"
          description: "plugin Id"
          required: true
          type: "string"
        - name: "score"
          in: "query"
          description: "plugin satisfaction score,greater than 0 and less than five,\
          \ and only one decimal place"
          required: true
          type: "string"
        - name: "userId"
          in: "query"
          required: true
          type: "string"
        - name: "userName"
          in: "query"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Plugin"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ErrorRespDto"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/ErrorRespDto"
definitions:
  ErrorRespDto:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      detail:
        type: "string"
    x-java-class: "org.edgegallery.developer.response.ErrorRespDto"
  Page:
    type: "object"
    properties:
      results:
        type: "array"
        items:
          type: "object"
      limit:
        type: "integer"
        format: "int32"
      offset:
        type: "integer"
        format: "int64"
      total:
        type: "integer"
        format: "int64"
    x-java-class: "org.edgegallery.developer.domain.shared.Page"
  AFile:
    type: "object"
    properties:
      originalFileName:
        type: "string"
      storageAddress:
        type: "string"
      name:
        type: "string"
      size:
        type: "integer"
        format: "int64"
    x-java-class: "org.edgegallery.developer.domain.shared.AFile"
  Plugin:
    type: "object"
    properties:
      pluginId:
        type: "string"
      pluginName:
        type: "string"
      introduction:
        type: "string"
      satisfaction:
        type: "number"
        format: "float"
      codeLanguage:
        type: "string"
      pluginType:
        type: "string"
      version:
        type: "string"
      scoreCount:
        type: "integer"
        format: "int32"
      downloadCount:
        type: "integer"
        format: "int32"
      logoFile:
        $ref: "#/definitions/AFile"
      pluginFile:
        $ref: "#/definitions/AFile"
      uploadTime:
        type: "string"
        format: "date-time"
      user:
        $ref: "#/definitions/User"
      apiFile:
        $ref: "#/definitions/AFile"
    x-java-class: "org.edgegallery.developer.domain.model.plugin.Plugin"
  User:
    type: "object"
    properties:
      userId:
        type: "string"
      userName:
        type: "string"
    x-java-class: "org.edgegallery.developer.domain.model.user.User"