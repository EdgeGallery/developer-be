---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mep-agent-config
data:
  app_instance_info.yaml: |-
    appInstanceId: {{ .Values.appInstanceId.value }}
    serviceInfoPosts:
      - serName: {agentName}
        serInstanceId:
        serCategory:
          href: "/example/catalogue1"
          id: id12345
          name: RNI
          version: version1
        version: {version}
        state: ACTIVE
        transportId: Rest1
        transportInfo:
          id: {id}
          name: REST
          description: REST API
          type: REST_HTTP
          protocol: HTTP
          version: '2.0'
          endpoint:
            uris:
              - http://{agentName}:{agentPort}
          implSpecificInfo: {}
        serializer: JSON
        scopeOfLocality: MEC_SYSTEM
        consumedLocalOnly: false
        isLocal: true
    serAvailabilityNotificationSubscriptions:
      - subscriptionType: SerAvailabilityNotificationSubscription
        callbackReference: string
        links:
          self:
            href: /mecSerMgmtApi/example
        filteringCriteria:
          serInstanceIds:
            - ServiceInstance123
          serNames:
            - ExampleService
          serCategories:
            - href: /example/catalogue1
              id: id12345
              name: RNI
              version: version1
          states:
            - ACTIVE
          isLocal: true

---IMAGE_LOOP_START---
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mesher-config-{imageNameSpe}
data:
  microservice.yaml: |-
    service_description:
      name: provider-mesher-{imageNameSpe}
      version: 1.1.1
      environment:  #microservice environment
      properties:
        allowCrossApp: true #whether to allow calls across applications
  mesher.yaml: |-
    admin: #admin API
      goRuntimeMetrics : true # enable metrics
      enable: true
  chassis.yaml: |-
    ---
    cse:
      protocols:
        http:
          listenAddress: 127.0.0.1:{imageNodePort}
        rest-admin:
          listenAddress: 127.0.0.1:{imageNodePortPlus}
      service:
        registry:
          address: http://{hostIp}:30100 # uri of service center
          scope: full #set full to be able to discover other app's service
          watch: false # set if you want to watch instance change event
          autoIPIndex: true # set to true if u want to resolve source IP to microservice
      handler:
        chain:
          Consumer:
            outgoing:  #consumer handlers
          Provider:
            incoming:  #provider handlers
---IMAGE_LOOP_END---