<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~    Copyright 2020 Huawei Technologies Co., Ltd.
  ~
  ~    Licensed under the Apache License, Version 2.0 (the "License");
  ~    you may not use this file except in compliance with the License.
  ~    You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~    Unless required by applicable law or agreed to in writing, software
  ~    distributed under the License is distributed on an "AS IS" BASIS,
  ~    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~    See the License for the specific language governing permissions and
  ~    limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
  namespace="org.edgegallery.developer.mapper.VmConfigMapper">
    <resultMap id="VmRegulation"
      type="org.edgegallery.developer.model.vm.VmRegulation">
        <id property="regulationId" column="regulation_id"/>
        <result property="architecture" column="architecture"/>
        <result property="nameZh" column="name_zh"/>
        <result property="nameEn" column="name_en"/>
        <result property="sceneZh" column="scene_zh"/>
        <result property="sceneEn" column="scene_en"/>
        <result property="memory" column="memory"/>
        <result property="cpu" column="cpu"/>
        <result property="systemDisk" column="system_disk"/>
        <result property="dataDisk" column="data_disk"/>
        <result property="gpu" column="gpu"/>
        <result property="otherAbility" column="other_ability"/>
    </resultMap>

    <resultMap id="VmFlavor"
      type="org.edgegallery.developer.model.vm.VmFlavor">
        <result property="architecture" column="architecture"/>
        <result property="flavor" column="flavor"/>
        <result property="constraints" column="constraints"/>
    </resultMap>

    <resultMap id="VmSystem"
      type="org.edgegallery.developer.model.vm.VmSystem">
        <id property="systemId" column="system_id"/>
        <result property="systemName" column="system_name"/>
        <result property="type" column="type"/>
        <result property="operateSystem" column="operate_system"/>
        <result property="version" column="version"/>
        <result property="systemBit" column="system_bit"/>
        <result property="systemDisk" column="system_disk"/>
    </resultMap>

    <resultMap id="VmNetwork"
      type="org.edgegallery.developer.model.vm.VmNetwork">
        <result property="networkType" column="network_type"/>
        <result property="descriptionZh" column="description_zh"/>
        <result property="descriptionEn" column="description_en"/>
        <result property="networkName" column="network_name"/>
    </resultMap>

    <resultMap id="VmUserData"
      type="org.edgegallery.developer.model.vm.VmUserData">
        <id property="operateSystem" column="operate_system"/>
        <result property="isTemp" column="is_temp"/>
        <result property="contents" column="contents"/>
        <result property="params" column="params"/>
    </resultMap>

    <resultMap id="VmPackageConfigMap"
      type="org.edgegallery.developer.model.vm.VmPackageConfig">
        <id property="id" column="id"/>
        <result property="projectId" column="project_id"/>
        <result property="vmRegulation" column="vm_regulation_desc"
          typeHandler="org.edgegallery.developer.model.handler.JsonTypeHandler"/>
        <result property="vmSystem" column="vm_system_desc"
          typeHandler="org.edgegallery.developer.model.handler.JsonTypeHandler"/>
        <result property="vmNetwork" column="vm_network_desc"
          typeHandler="org.edgegallery.developer.model.handler.JsonCollectionTypeHandler"/>
        <result property="vmUserData" column="vm_user_data"
          typeHandler="org.edgegallery.developer.model.handler.JsonTypeHandler"/>
        <result property="vmName" column="vm_name"/>
        <result property="ak" column="ak"/>
        <result property="sk" column="sk"/>
        <result property="appInstanceId" column="app_instance_id"/>
        <result property="createTime" column="create_time"/>
    </resultMap>

    <resultMap id="VmCreateConfigMap"
      type="org.edgegallery.developer.model.vm.VmCreateConfig">
        <id property="vmId" column="vm_id"/>
        <result property="projectId" column="project_id"/>
        <result property="vmName" column="vm_name"/>
        <result property="status" column="status"/>
        <result property="stageStatus" column="stage_status"
          typeHandler="org.edgegallery.developer.model.handler.JsonTypeHandler"/>
        <result property="host" column="host"
          typeHandler="org.edgegallery.developer.model.handler.JsonTypeHandler"/>
        <result property="lcmToken" column="lcm_token"/>
        <result property="vmInfo" column="vm_info"
          typeHandler="org.edgegallery.developer.model.handler.JsonCollectionTypeHandler"/>
        <result property="appInstanceId" column="app_instance_id"/>
        <result property="packageId" column="package_id"/>
        <result property="createTime" column="create_time"/>
        <result property="log" column="log"/>
    </resultMap>

    <resultMap id="VmImageMap"
      type="org.edgegallery.developer.model.vm.VmImageConfig">
        <id property="vmId" column="vm_id"/>
        <result property="imageId" column="image_id"/>
        <result property="projectId" column="project_id"/>
        <result property="vmName" column="vm_name"/>
        <result property="imageName" column="image_name"/>
        <result property="appInstanceId" column="app_instance_id"/>
        <result property="hostIp" column="host_ip"/>
        <result property="sumChunkNum" column="sum_chunk_num"/>
        <result property="chunkSize" column="chunk_size"/>
        <result property="stageStatus" column="stage_status"
          typeHandler="org.edgegallery.developer.model.handler.JsonTypeHandler"/>
        <result property="status" column="status"/>
        <result property="lcmToken" column="lcm_token"/>
        <result property="createTime" column="create_time"/>
        <result property="log" column="log"/>
    </resultMap>

    <select id="getVmRegulation"
      resultMap="VmRegulation">
        SELECT
        *
        FROM
        tbl_vm_regulation
    </select>

    <select id="getVmSystem"
      parameterType="String"
      resultMap="VmSystem">
        SELECT
        *
        FROM
        tbl_vm_system
        WHERE status = 'PUBLISHED' and (type = 'public' or user_id = #{userId})
    </select>

    <select id="getVmNetwork"
      resultMap="VmNetwork">
        SELECT
        *
        FROM
        tbl_vm_network
    </select>

    <select id="getVmNetworkByType"
      resultMap="VmNetwork">
        SELECT
        *
        FROM
        tbl_vm_network
        WHERE network_type = #{networkType}
    </select>

    <select id="getVmFlavor"
      resultMap="VmFlavor">
        SELECT
        *
        FROM
        tbl_vm_flavor
        where architecture = #{architecture}
    </select>

    <select id="getVmUserData"
      resultMap="VmUserData">
        SELECT
        *
        FROM
        tbl_vm_user_data
    </select>

    <insert id="saveVmPackageConfig"
      parameterType="org.edgegallery.developer.model.vm.VmPackageConfig">
        insert into
        tbl_project_vm_package_config (id, project_id, vm_regulation_desc,
        vm_system_desc, vm_network_desc, vm_name, app_instance_id, vm_user_data, ak, sk, create_time)
        values
        ( #{id}, #{projectId},
        #{vmRegulation, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler},
        #{vmSystem, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler},
        #{vmNetwork, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonCollectionTypeHandler},
        #{vmName}, #{appInstanceId}, #{vmUserData, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler},
        #{ak}, #{sk}, #{createTime})
    </insert>

    <select id="getVmPackageConfig"
      parameterType="String" resultMap="VmPackageConfigMap">
        SELECT
        *
        FROM
        tbl_project_vm_package_config
        where project_id = #{projectId}
    </select>

    <delete id="deleteVmPackageConfig" parameterType="String">
        DELETE FROM tbl_project_vm_package_config WHERE id = #{id};
    </delete>

    <insert id="saveVmCreateConfig"
      parameterType="org.edgegallery.developer.model.vm.VmCreateConfig">
        insert into
        tbl_project_vm_create_config (vm_id, project_id, vm_name, app_instance_id, lcm_token, status, stage_status)
        values
        ( #{vmId}, #{projectId}, #{vmName}, #{appInstanceId}, #{lcmToken}, #{status},
        #{stageStatus, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler})
    </insert>

    <update id="updateVmCreateConfig" parameterType="org.edgegallery.developer.model.vm.VmCreateConfig">
        UPDATE
        tbl_project_vm_create_config
        SET
        status = #{status}, stage_status =
        #{stageStatus, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler},
        host =
        #{host, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler},
        lcm_token = #{lcmToken},
        vm_info = #{vmInfo, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler},
        create_time = #{createTime}, package_id = #{packageId}, log = #{log}
        WHERE
        vm_id = #{vmId}
    </update>

    <select id="getVmCreateConfigs"
      parameterType="String" resultMap="VmCreateConfigMap">
        SELECT
        *
        FROM
        tbl_project_vm_create_config
        where project_id = #{projectId}
    </select>

    <delete id="deleteVmCreateConfigs" parameterType="String">
        DELETE FROM tbl_project_vm_create_config WHERE project_id = #{projectId};
    </delete>

    <delete id="deleteVmCreateConfig" parameterType="String">
        DELETE FROM tbl_project_vm_create_config WHERE project_id = #{arg0} and vm_id = #{arg1};
    </delete>

    <select id="getVmCreateConfig"
      parameterType="String" resultMap="VmCreateConfigMap">
        SELECT
        *
        FROM
        tbl_project_vm_create_config
        WHERE
        project_id = #{arg0} and vm_id = #{arg1}
    </select>

    <select id="getVmCreateConfigStatus" parameterType="String" resultMap="VmCreateConfigMap">
        SELECT
        *
        FROM
        tbl_project_vm_create_config
        WHERE
        status = #{status}
    </select>

    <insert id="saveVmImageConfig"
      parameterType="org.edgegallery.developer.model.vm.VmImageConfig">
        insert into
        tbl_project_vm_image_config (vm_id, project_id, vm_name, app_instance_id, lcm_token, status, stage_status)
        values
        ( #{vmId}, #{projectId},
        #{vmName}, #{appInstanceId}, #{lcmToken}, #{status},
        #{stageStatus, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler})
    </insert>

    <select id="getVmImage"
      parameterType="String" resultMap="VmImageMap">
        SELECT
        *
        FROM
        tbl_project_vm_image_config
        WHERE
        project_id = #{arg0} and vm_id = #{arg1}
    </select>

    <delete id="deleteVmImage" parameterType="String">
        DELETE FROM tbl_project_vm_image_config WHERE project_id = #{arg0} and vm_id = #{arg1};
    </delete>

    <update id="updateVmImageConfig" parameterType="org.edgegallery.developer.model.vm.VmImageConfig">
        UPDATE
        tbl_project_vm_image_config
        SET
        status = #{status}, stage_status =
        #{stageStatus, jdbcType=OTHER, typeHandler=org.edgegallery.developer.model.handler.JsonTypeHandler},
        host_ip = #{hostIp}, image_id = #{imageId}, sum_chunk_num = #{sumChunkNum}, chunk_size = #{chunkSize},
        create_time = #{createTime}, log = #{log}, image_name = #{imageName}
        WHERE
        vm_id = #{vmId}
    </update>

    <select id="getVmImageConfigStatus" parameterType="String" resultMap="VmImageMap">
        SELECT
        *
        FROM
        tbl_project_vm_image_config
        WHERE
        status = #{status}
    </select>

</mapper>