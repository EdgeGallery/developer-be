{ swagger: '2.0',
  info: 
   { version: '1.0.0',
     title: 'swagger definition for org.edgegallery.developer.controller.PluginController',
     'x-java-interface': 'cse.gen.openMec.mec_developer.plugin.PluginControllerIntf' },
  basePath: '/mec/developer/v1/plugins',
  schemes: [ 'http' ],
  consumes: [ 'application/json' ],
  produces: [ 'application/json' ],
  paths: 
   { '/{pluginId}': 
      { put: 
         { tags: [ 'Plugin' ],
           summary: 'update plugin',
           operationId: 'updatePlugin',
           parameters: 
            [ { name: 'pluginFile',
                in: 'formData',
                description: 'plugin',
                required: true,
                type: 'file' },
              { name: 'logoFile',
                in: 'formData',
                description: 'logo File',
                required: true,
                type: 'file' },
              { name: 'apiFile',
                in: 'formData',
                description: 'api File',
                required: true,
                type: 'file' },
              { name: 'pluginName',
                in: 'formData',
                description: 'plugin name',
                required: true,
                type: 'string' },
              { name: 'codeLanguage',
                in: 'formData',
                description: 'plugin function',
                required: true,
                type: 'string' },
              { name: 'pluginType',
                in: 'formData',
                description: 'plugin type,1:plugin,2:SDK',
                required: true,
                type: 'integer',
                format: 'int32' },
              { name: 'version',
                in: 'formData',
                description: 'plugin version',
                required: true,
                type: 'string' },
              { name: 'introduction',
                in: 'formData',
                description: 'plugin introduction',
                required: true,
                type: 'string' },
              { name: 'pluginId',
                in: 'path',
                description: 'plugin id',
                required: true,
                type: 'string' },
              { name: 'Authorization',
                in: 'header',
                description: 'Authorization token',
                required: true,
                type: 'string',
                'x-example': 'Basic 18zgoYu4sSAP/RZ1lVrTVA==' },
              { name: 'userId',
                in: 'header',
                description: 'userId token',
                required: true,
                type: 'string',
                'x-example': '37423702-4bee-41e8-9c38-7cc906c27af3' } ],
           responses: 
            { '200': 
               { description: 'OK',
                 schema: { '$ref': '#/definitions/Plugin' } },
              '204': 
               { description: 'No Content',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '400': 
               { description: 'Bad Request',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '401': 
               { description: 'Unauthorized',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '403': 
               { description: 'Forbidden',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '500': 
               { description: 'Internal Server Error',
                 schema: { '$ref': '#/definitions/FormatRespDto' } } } },
        delete: 
         { tags: [ 'Plugin' ],
           summary: 'delete one plugin or sdk',
           operationId: 'delPluById',
           parameters: 
            [ { name: 'pluginId',
                in: 'path',
                description: 'plugin id',
                required: true,
                type: 'string' },
              { name: 'Authorization',
                in: 'header',
                description: 'Authorization token',
                required: true,
                type: 'string',
                'x-example': 'Basic 18zgoYu4sSAP/RZ1lVrTVA==' },
              { name: 'userId',
                in: 'header',
                description: 'userId token',
                required: true,
                type: 'string',
                'x-example': '37423702-4bee-41e8-9c38-7cc906c27af3' } ],
           responses: 
            { '200': { description: 'OK', schema: { type: 'boolean' } },
              '400': 
               { description: 'Bad Request',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '401': 
               { description: 'Unauthorized',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '403': 
               { description: 'Forbidden',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '500': 
               { description: 'Internal Server Error',
                 schema: { '$ref': '#/definitions/FormatRespDto' } } } } },
     '/{pluginId}/action/download': 
      { get: 
         { tags: [ 'Plugin' ],
           summary: 'download one plugin or sdk',
           operationId: 'downloadFile',
           parameters: 
            [ { name: 'pluginId',
                in: 'path',
                description: 'pluginId',
                required: true,
                type: 'string' } ],
           responses: 
            { '200': { description: 'OK', schema: { type: 'file' } },
              '400': { description: 'Bad Request', schema: { type: 'string' } },
              '401': 
               { description: 'Unauthorized',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '403': 
               { description: 'Forbidden',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '404': { description: 'No Content', schema: { type: 'file' } } } } },
     '/': 
      { get: 
         { tags: [ 'Plugin' ],
           summary: 'query all plugin or sdk',
           operationId: 'getAll',
           parameters: 
            [ { name: 'pluginType',
                in: 'query',
                description: 'plugin type,1:plugin 2:sdk',
                required: true,
                type: 'integer',
                format: 'int32' },
              { name: 'Authorization',
                in: 'header',
                description: 'Authorization token',
                required: true,
                type: 'string',
                'x-example': 'Basic 18zgoYu4sSAP/RZ1lVrTVA==' },
              { name: 'userId',
                in: 'header',
                description: 'userId token',
                required: true,
                type: 'string',
                'x-example': '37423702-4bee-41e8-9c38-7cc906c27af3' } ],
           responses: 
            { '200': { description: 'OK', schema: { type: 'string' } },
              '400': 
               { description: 'Bad Request',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '401': 
               { description: 'Unauthorized',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '403': 
               { description: 'Forbidden',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '500': 
               { description: 'Internal Server Error',
                 schema: { '$ref': '#/definitions/FormatRespDto' } } } },
        post: 
         { tags: [ 'Plugin' ],
           summary: 'upload plugin to server',
           operationId: 'upload',
           parameters: 
            [ { name: 'pluginFile',
                in: 'formData',
                description: 'plugin',
                required: true,
                type: 'file' },
              { name: 'logoFile',
                in: 'formData',
                description: 'logo File',
                required: true,
                type: 'file' },
              { name: 'apiFile',
                in: 'formData',
                description: 'api File',
                required: true,
                type: 'file' },
              { name: 'pluginName',
                in: 'formData',
                description: 'plugin name',
                required: true,
                type: 'string' },
              { name: 'codeLanguage',
                in: 'formData',
                description: 'plugin function',
                required: true,
                type: 'string' },
              { name: 'pluginType',
                in: 'formData',
                description: 'plugin type,1:plugin,2:SDK',
                required: true,
                type: 'integer',
                format: 'int32' },
              { name: 'version',
                in: 'formData',
                description: 'plugin version',
                required: true,
                type: 'string' },
              { name: 'introduction',
                in: 'formData',
                description: 'plugin introduction',
                required: true,
                type: 'string' },
              { name: 'userName',
                in: 'formData',
                description: 'the author\'s name of upload plugin',
                required: true,
                type: 'string' },
              { name: 'Authorization',
                in: 'header',
                description: 'Authorization token',
                required: true,
                type: 'string',
                'x-example': 'Basic 18zgoYu4sSAP/RZ1lVrTVA==' },
              { name: 'userId',
                in: 'header',
                description: 'userId token',
                required: true,
                type: 'string',
                'x-example': '37423702-4bee-41e8-9c38-7cc906c27af3' } ],
           responses: 
            { '200': { description: 'OK', schema: { type: 'string' } },
              '400': 
               { description: 'Bad Request',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '401': 
               { description: 'Unauthorized',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '403': 
               { description: 'Forbidden',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '500': 
               { description: 'Internal Server Error',
                 schema: { '$ref': '#/definitions/FormatRespDto' } } } } },
     '/{pluginId}/action/get-apifile': 
      { get: 
         { tags: [ 'Plugin' ],
           summary: 'download  api file',
           operationId: 'getApiFile',
           parameters: 
            [ { name: 'pluginId',
                in: 'path',
                description: 'pluginId',
                required: true,
                type: 'string' } ],
           responses: 
            { '200': { description: 'OK', schema: { type: 'file' } },
              '400': { description: 'Bad Request', schema: { type: 'string' } },
              '404': { description: 'Unauthorized', schema: { type: 'file' } } } } },
     '/{pluginId}/action/get-logofile': 
      { get: 
         { tags: [ 'Plugin' ],
           summary: 'download logo file',
           operationId: 'getLogoFile',
           parameters: 
            [ { name: 'pluginId',
                in: 'path',
                description: 'pluginId',
                required: true,
                type: 'string' } ],
           responses: 
            { '200': { description: 'OK', schema: { type: 'file' } },
              '204': 
               { description: 'No Content',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '400': 
               { description: 'Bad Request',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '401': 
               { description: 'Unauthorized',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '403': 
               { description: 'Forbidden',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '500': 
               { description: 'Internal Server Error',
                 schema: { '$ref': '#/definitions/FormatRespDto' } } } } },
     '/{pluginId}/action/score': 
      { put: 
         { tags: [ 'Plugin' ],
           summary: 'update plugin satisfaction',
           operationId: 'updateScore',
           parameters: 
            [ { name: 'pluginId',
                in: 'path',
                description: 'plugin Id',
                required: true,
                type: 'string' },
              { name: 'score',
                in: 'query',
                description: 'plugin satisfaction score,greater than 0 and less than five, and only one decimal place',
                required: true,
                type: 'string' },
              { name: 'Authorization',
                in: 'header',
                description: 'Authorization token',
                required: true,
                type: 'string',
                'x-example': 'Basic 18zgoYu4sSAP/RZ1lVrTVA==' },
              { name: 'userId',
                in: 'header',
                description: 'userId token',
                required: true,
                type: 'string',
                'x-example': '37423702-4bee-41e8-9c38-7cc906c27af3' } ],
           responses: 
            { '200': { description: 'OK', schema: { type: 'string' } },
              '204': 
               { description: 'No Content',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '400': 
               { description: 'Bad Request',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '401': 
               { description: 'Unauthorized',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '403': 
               { description: 'Forbidden',
                 schema: { '$ref': '#/definitions/FormatRespDto' } },
              '500': 
               { description: 'Internal Server Error',
                 schema: { '$ref': '#/definitions/FormatRespDto' } } } } } },
  definitions: 
   { ErrorRespDto:
      { type: 'object',
        properties: 
         { code: { type: 'integer', format: 'int32' },
           message: { type: 'string' },
           detail: { type: 'string' } },
        'x-java-class': 'org.edgegallery.developer.response.ErrorRespDto' },
     FormatRespDto:
      { type: 'object',
        properties: 
         { ErrorRespDto: { '$ref': '#/definitions/ErrorRespDto' },
           estatus: 
            { type: 'string',
              enum: 
               [ 'OK',
                 'CREATED',
                 'ACCEPTED',
                 'NO_CONTENT',
                 'RESET_CONTENT',
                 'PARTIAL_CONTENT',
                 'MOVED_PERMANENTLY',
                 'FOUND',
                 'SEE_OTHER',
                 'NOT_MODIFIED',
                 'USE_PROXY',
                 'TEMPORARY_REDIRECT',
                 'BAD_REQUEST',
                 'UNAUTHORIZED',
                 'PAYMENT_REQUIRED',
                 'FORBIDDEN',
                 'NOT_FOUND',
                 'METHOD_NOT_ALLOWED',
                 'NOT_ACCEPTABLE',
                 'PROXY_AUTHENTICATION_REQUIRED',
                 'REQUEST_TIMEOUT',
                 'CONFLICT',
                 'GONE',
                 'LENGTH_REQUIRED',
                 'PRECONDITION_FAILED',
                 'REQUEST_ENTITY_TOO_LARGE',
                 'REQUEST_URI_TOO_LONG',
                 'UNSUPPORTED_MEDIA_TYPE',
                 'REQUESTED_RANGE_NOT_SATISFIABLE',
                 'EXPECTATION_FAILED',
                 'PRECONDITION_REQUIRED',
                 'TOO_MANY_REQUESTS',
                 'REQUEST_HEADER_FIELDS_TOO_LARGE',
                 'INTERNAL_SERVER_ERROR',
                 'NOT_IMPLEMENTED',
                 'BAD_GATEWAY',
                 'SERVICE_UNAVAILABLE',
                 'GATEWAY_TIMEOUT',
                 'HTTP_VERSION_NOT_SUPPORTED',
                 'NETWORK_AUTHENTICATION_REQUIRED' ],
              'x-java-class': 'javax.ws.rs.core.Response$Status' } },
        'x-java-class': 'org.edgegallery.developer.response.FormatRespDto' },
     Plugin: 
      { type: 'object',
        properties: 
         { pluginId: { type: 'string' },
           pluginName: { type: 'string' },
           introduction: { type: 'string' },
           satisfaction: { type: 'number', format: 'float' },
           codeLanguage: { type: 'string' },
           pluginType: { type: 'integer', format: 'int32' },
           version: { type: 'string' },
           downloadCount: { type: 'integer', format: 'int32' },
           logoFile: { type: 'string' },
           pluginFile: { type: 'string' },
           uploadTime: { type: 'string', format: 'date-time' },
           userId: { type: 'string' },
           userName: { type: 'string' },
           pluginSize: { type: 'integer', format: 'int32' },
           apiFile: { type: 'string' },
           scoreCount: { type: 'integer', format: 'int32' } },
        'x-java-class': 'org.edgegallery.developer.model.Plugin' },
     PluginListResponse: 
      { type: 'object',
        properties: { plugins: { type: 'array', items: { '$ref': '#/definitions/Plugin' } } },
        'x-java-class': 'org.edgegallery.developer.response.PluginListResponse' } } }